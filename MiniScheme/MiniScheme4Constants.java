/* Generated By:JavaCC: Do not edit this line. MiniScheme4Constants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MiniScheme4Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLY = 7;
  /** RegularExpression Id. */
  int DIVIDE = 8;
  /** RegularExpression Id. */
  int INTEGER = 9;
  /** RegularExpression Id. */
  int BOOLEAN = 10;
  /** RegularExpression Id. */
  int WRITE = 11;
  /** RegularExpression Id. */
  int READ = 12;
  /** RegularExpression Id. */
  int NEWLINE = 13;
  /** RegularExpression Id. */
  int LPAREN = 14;
  /** RegularExpression Id. */
  int RPAREN = 15;
  /** RegularExpression Id. */
  int DEFINE = 16;
  /** RegularExpression Id. */
  int SET = 17;
  /** RegularExpression Id. */
  int LET = 18;
  /** RegularExpression Id. */
  int IF = 19;
  /** RegularExpression Id. */
  int AND = 20;
  /** RegularExpression Id. */
  int OR = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int EQV = 23;
  /** RegularExpression Id. */
  int LT = 24;
  /** RegularExpression Id. */
  int IsINTEGER = 25;
  /** RegularExpression Id. */
  int IsBOOLEAN = 26;
  /** RegularExpression Id. */
  int LAMBDA = 27;
  /** RegularExpression Id. */
  int IDENTIFIER = 28;
  /** RegularExpression Id. */
  int INITIAL = 29;
  /** RegularExpression Id. */
  int SUBSEQUENT = 30;
  /** RegularExpression Id. */
  int DIGIT = 31;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"quotient\"",
    "<INTEGER>",
    "<BOOLEAN>",
    "\"write\"",
    "\"read\"",
    "\"newline\"",
    "\"(\"",
    "\")\"",
    "\"define\"",
    "\"set!\"",
    "\"let\"",
    "\"if\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"eqv?\"",
    "\"<\"",
    "\"integer?\"",
    "\"boolean?\"",
    "\"lambda\"",
    "<IDENTIFIER>",
    "<INITIAL>",
    "<SUBSEQUENT>",
    "<DIGIT>",
  };

}
