(define (process)
  (let ((n (read))
        (lcm (read))
        (i 0))
    (begin
      (if (< i n)
          (let ((next (read))
                (a lcm)
                (b next))
            (if (not (eqv? b 0))
                (let ((temp b)
                      (b (modulo a b))
                      (a temp))
                  (let ((gcd a))
                    (set! lcm (* lcm (quotient next gcd)))
                    (write lcm)
                    (newline)
                    (process)))))))))
(process)