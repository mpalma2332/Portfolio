/* Generated By:JavaCC: Do not edit this line. MiniScheme4.java */
import java.util.Scanner;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
public class MiniScheme4 implements MiniScheme4Constants {
  public static void main(String args[]) throws ParseException
  {
    try {
      MiniScheme4 parser = null;
      if (args.length > 0)
      parser = new MiniScheme4(new FileInputStream(args[0]));
      else
      {
             System.out.print("Program filename: ");
             Scanner in = new Scanner(System.in);
             parser = new MiniScheme4(new FileInputStream(in.next()));
       }
      Program p = MiniScheme4.program();
      p.eval(new Env());
    }
    catch (FileNotFoundException e)
    {
           System.out.println(e.getMessage());
    }
    catch (RuntimeException e)
    {
           System.out.println(e.getMessage());
    }
  }

  static final public Program program() throws ParseException {
  Program p = new Program(); Def d; Exp e;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case LPAREN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(2147483647)) {
        d = def();
                                              p.expList.add(d);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case BOOLEAN:
        case LPAREN:
        case IDENTIFIER:
          e = exp();
                                                                                 p.expList.add(e);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(0);
                                                                                                                  {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public Def def() throws ParseException {
 Identifier v; Def d; Exp e;
    jj_consume_token(LPAREN);
    jj_consume_token(DEFINE);
    v = variable();
    e = exp();
                                         d = new Define(v, e);
    jj_consume_token(RPAREN);
      {if (true) return d ;}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier variable() throws ParseException {
    jj_consume_token(IDENTIFIER);
                         {if (true) return new Identifier(token.image);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp exp() throws ParseException {
 Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      e = variable();
                  {if (true) return e;}
      break;
    case INTEGER:
    case BOOLEAN:
      e = literal();
                  {if (true) return e;}
      break;
    default:
      jj_la1[2] = jj_gen;
      if (jj_2_2(2147483647)) {
        e = conditional();
                                                  {if (true) return e;}
      } else if (jj_2_3(2147483647)) {
        e = assignment();
                                                  {if (true) return e;}
      } else if (jj_2_4(2147483647)) {
        e = lambdaExp();
                                                     {if (true) return e;}
      } else if (jj_2_5(2147483647)) {
        e = procedureCall();
                                                              {if (true) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          e = derivedExp();
                     {if (true) return e;}
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
                      {if (true) return new Int(Integer.parseInt(token.image));}
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                      {if (true) return new Bool(token.image);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp conditional() throws ParseException {
 Exp exp1; Exp exp2; Exp exp3 = null;
    jj_consume_token(LPAREN);
    jj_consume_token(IF);
    exp1 = exp();
    exp2 = exp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
    case LPAREN:
    case IDENTIFIER:
      exp3 = exp();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
                                                             exp1 = new If(exp1, exp2, exp3);
    jj_consume_token(RPAREN);
          {if (true) return exp1 ;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp assignment() throws ParseException {
 Identifier v; Exp e;
    jj_consume_token(LPAREN);
    jj_consume_token(SET);
    v = variable();
    e = exp();
                                            e = new Set(v, e);
    jj_consume_token(RPAREN);
  {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp derivedExp() throws ParseException {
  Exp exp1 = null, exp2 = null; String op;And and = new And(); Or or = new Or(); Identifier v;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WRITE:
      jj_consume_token(WRITE);
      exp1 = exp();
                                   exp1 = new  Write(exp1);
      break;
    case READ:
      jj_consume_token(READ);
             exp1 = new Read();
      break;
    case NEWLINE:
      jj_consume_token(NEWLINE);
                exp1 = new Newline();
      break;
    case PLUS:
    case MINUS:
    case MULTIPLY:
    case DIVIDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                      op = token.image;
      exp1 = exp();
      exp2 = exp();
  exp1 = new ArithExp(op, exp1, exp2);
      break;
    case LET:
      jj_consume_token(LET);
           Let l = new Let();
      jj_consume_token(LPAREN);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        bindingSpec(l);
      }
      jj_consume_token(RPAREN);
      body(l);
                                                                                  exp1 = l;
      break;
    case AND:
      jj_consume_token(AND);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case BOOLEAN:
        case LPAREN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        exp1 = exp();
                          and.e.add(exp1);
      }
                                                 exp1 = and;
      break;
    case OR:
      jj_consume_token(OR);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case BOOLEAN:
        case LPAREN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        exp1 = exp();
                         or.ors.add(exp1);
      }
                                                 exp1 = or;
      break;
    case NOT:
      jj_consume_token(NOT);
      exp1 = exp();
                         exp1 = new Not(exp1);
      break;
    case EQV:
      jj_consume_token(EQV);
      exp1 = exp();
      exp2 = exp();
                                      exp1 = new Eqv(exp1, exp2);
      break;
    case LT:
      jj_consume_token(LT);
      exp1 = exp();
      exp2 = exp();
                                     exp1 = new LessThan(exp1, exp2);
      break;
    case IsINTEGER:
      jj_consume_token(IsINTEGER);
      exp1 = exp();
                               exp1 = new isInteger(exp1);
      break;
    case IsBOOLEAN:
      jj_consume_token(IsBOOLEAN);
      exp1 = exp();
                               exp1 = new isBoolean(exp1);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
         {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp bindingSpec(Let l) throws ParseException {
 Identifier v; Exp e;
    jj_consume_token(LPAREN);
    v = variable();
                         l.var.add(v);
    e = exp();
                                                     l.bindingExp.add(e);
    jj_consume_token(RPAREN);
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  static final public void body(Let l) throws ParseException {
 Def d; Exp e;
    label_5:
    while (true) {
      if (jj_2_6(2147483647)) {
        ;
      } else {
        break label_5;
      }
      d = def();
                                              l.bodyExp.add(d);
    }
    label_6:
    while (true) {
      e = exp();
                                                                                 l.bodyExp.add(e);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case LPAREN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
    }
  }

  static final public void body2(Lambda lam) throws ParseException {
 Def d; Exp e;
    label_7:
    while (true) {
      if (jj_2_7(2147483647)) {
        ;
      } else {
        break label_7;
      }
      d = def();
                                               lam.bodyExp.add(d);
    }
    label_8:
    while (true) {
      e = exp();
                                                                                    lam.bodyExp.add(e);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case LPAREN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
    }
  }

// (lamnda ( { < variable > }) < body >)
  static final public Exp lambdaExp() throws ParseException {
 Identifier v; Exp exp1;
    jj_consume_token(LPAREN);
    jj_consume_token(LAMBDA);
                      Lambda lam = new Lambda();
    jj_consume_token(LPAREN);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_9;
      }
      v = variable();
                                                                                lam.var.add(v);
    }
    jj_consume_token(RPAREN);
    body2(lam);
                                                                                                                             exp1 = lam;
    jj_consume_token(RPAREN);
          {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

// ( { < expression > }+ )
  static final public Exp procedureCall() throws ParseException {
 Exp e;
    jj_consume_token(LPAREN);
          ProcedureCall pc = new ProcedureCall();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case LPAREN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_10;
      }
      e = exp();
                                                                 pc.exps.add(e);
    }
    jj_consume_token(RPAREN);
          {if (true) return pc;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(LAMBDA)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(SET)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniScheme4TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10004600,0x10004600,0x10000600,0x4000,0x600,0x10004600,0x1e0,0x4000,0x10004600,0x10004600,0x7f439e0,0x10004600,0x10004600,0x10000000,0x10004600,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[7];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniScheme4(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniScheme4(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniScheme4TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniScheme4(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniScheme4TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniScheme4(MiniScheme4TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniScheme4TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
